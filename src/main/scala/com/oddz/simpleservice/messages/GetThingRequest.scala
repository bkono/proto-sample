// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: getThingRequest.proto

package com.oddz.simpleservice.messages

final case class GetThing (
	`id`: Long = 0L,
	`queryFilter`: Option[String] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[GetThing]
	with net.sandrogrzicic.scalabuff.Parser[GetThing] {

	def setQueryFilter(_f: String) = copy(`queryFilter` = Some(_f))

	def clearQueryFilter = copy(`queryFilter` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeInt64(1, `id`)
		if (`queryFilter`.isDefined) output.writeString(2, `queryFilter`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeInt64Size(1, `id`)
		if (`queryFilter`.isDefined) __size += computeStringSize(2, `queryFilter`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): GetThing = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __id: Long = 0L
		var __queryFilter: Option[String] = `queryFilter`

		def __newMerged = GetThing(
			__id,
			__queryFilter
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __id = in.readInt64()
			case 18 => __queryFilter = Some(in.readString())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: GetThing) = {
		GetThing(
			m.`id`,
			m.`queryFilter`.orElse(`queryFilter`)
		)
	}

	def getDefaultInstanceForType = GetThing.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object GetThing {
	@reflect.BeanProperty val defaultInstance = new GetThing()

	def parseFrom(data: Array[Byte]): GetThing = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): GetThing = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): GetThing = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): GetThing = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[GetThing] = defaultInstance.mergeDelimitedFromStream(stream)

	val ID_FIELD_NUMBER = 1
	val QUERY_FILTER_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: GetThing) = defaultInstance.mergeFrom(prototype)

}
final case class GetThingResponse (
	`thing`: Option[Thing] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[GetThingResponse]
	with net.sandrogrzicic.scalabuff.Parser[GetThingResponse] {

	def setThing(_f: Thing) = copy(`thing` = Some(_f))

	def clearThing = copy(`thing` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		if (`thing`.isDefined) output.writeMessage(1, `thing`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		if (`thing`.isDefined) __size += computeMessageSize(1, `thing`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): GetThingResponse = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __thing: Option[Thing] = `thing`

		def __newMerged = GetThingResponse(
			__thing
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __thing = Some(readMessage[Thing](in, __thing.orElse({
				__thing = Thing.defaultInstance
				__thing
			}).get, _emptyRegistry))
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: GetThingResponse) = {
		GetThingResponse(
			m.`thing`.orElse(`thing`)
		)
	}

	def getDefaultInstanceForType = GetThingResponse.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object GetThingResponse {
	@reflect.BeanProperty val defaultInstance = new GetThingResponse()

	def parseFrom(data: Array[Byte]): GetThingResponse = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): GetThingResponse = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): GetThingResponse = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): GetThingResponse = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[GetThingResponse] = defaultInstance.mergeDelimitedFromStream(stream)

	val THING_FIELD_NUMBER = 1

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: GetThingResponse) = defaultInstance.mergeFrom(prototype)

}
final case class Thing (
	`id`: Long = 0L,
	`name`: String = "",
	`isApproved`: Option[Boolean] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Thing]
	with net.sandrogrzicic.scalabuff.Parser[Thing] {

	def setIsApproved(_f: Boolean) = copy(`isApproved` = Some(_f))

	def clearIsApproved = copy(`isApproved` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeInt64(1, `id`)
		output.writeString(2, `name`)
		if (`isApproved`.isDefined) output.writeBool(3, `isApproved`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeInt64Size(1, `id`)
		__size += computeStringSize(2, `name`)
		if (`isApproved`.isDefined) __size += computeBoolSize(3, `isApproved`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Thing = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __id: Long = 0L
		var __name: String = ""
		var __isApproved: Option[Boolean] = `isApproved`

		def __newMerged = Thing(
			__id,
			__name,
			__isApproved
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __id = in.readInt64()
			case 18 => __name = in.readString()
			case 24 => __isApproved = Some(in.readBool())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Thing) = {
		Thing(
			m.`id`,
			m.`name`,
			m.`isApproved`.orElse(`isApproved`)
		)
	}

	def getDefaultInstanceForType = Thing.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object Thing {
	@reflect.BeanProperty val defaultInstance = new Thing()

	def parseFrom(data: Array[Byte]): Thing = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Thing = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Thing = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Thing = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Thing] = defaultInstance.mergeDelimitedFromStream(stream)

	val ID_FIELD_NUMBER = 1
	val NAME_FIELD_NUMBER = 2
	val IS_APPROVED_FIELD_NUMBER = 3

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Thing) = defaultInstance.mergeFrom(prototype)

}

object GetThingRequest {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

}
